/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package hwa_3_designpatterns;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.DisplayName;

class AppTest {
    @Test
    @DisplayName("warm up test, app has a string")
    void tc_0() {
        App classUnderTest = new App();
        assertNotNull(classUnderTest.getGreeting(), "app should have a greeting");
    }

    /*
     * Testing AuthManager
     */
    @Test
    @DisplayName("testGetInstance")
    public void AuthManagerTest_tc_0() {
        AuthManager instance1 = AuthManager.getInstance();
        AuthManager instance2 = AuthManager.getInstance();

        assertNotNull(instance1);
        assertNotNull(instance2);
        assertSame(instance1, instance2);
    }

    @Test
    @DisplayName("testAuthenticateUser")
    public void AuthManagerTest_tc_1() {
        AuthManager authManager = AuthManager.getInstance();

        // Test with valid credentials
        assertTrue(authManager.authenticateUser("username", "password"));

        // Test with invalid credentials
        assertFalse(authManager.authenticateUser("invaliduser", "invalidpassword"));
    }

    

    /*
     * Testing ShoppingCart
     */

    @Test
    @DisplayName("testCheckoutWithCreditCard")
    public void ShoppingCartTest_tc_0() {
        ShoppingCart cart = new ShoppingCart();
        PaymentStrategy payment = new CreditCardPayment("1234 5678 9012 3456", "123", "12/25");
        cart.setPaymentStrategy(payment);
        cart.checkout(1500.0);
        // Assert checkout logic here, if applicable
        String msg = payment.getMsg();
        assertEquals("Paid: 1500.00", msg); 
    }

    @Test
    @DisplayName("testCheckoutWithPayPal")
    public void ShoppingCartTest_tc_1() {
        ShoppingCart cart = new ShoppingCart();
        PaymentStrategy payment = new PayPalPayment("example@email.com", "password");
        cart.setPaymentStrategy(payment);
        cart.checkout(1500.0);
        // Assert checkout logic here, if applicable
        String msg = payment.getMsg();
        assertEquals("Paid: 1500.00", msg); 
    }

    /*
     * Testing Order
     */

    @Test
    @DisplayName("testOrderObservers")
    public void OrderTest_tc_0() {
        Order order = new Order("ORD123", 1500.0);
        InventoryManager inventoryManager = new InventoryManager();
        ShippingDepartment shippingDepartment = new ShippingDepartment();
        order.addObserver(inventoryManager);
        order.addObserver(shippingDepartment);
        order.notifyObservers();
        // Assert observer notifications, if applicable
        String rc = "ORD123: 1500.00";
        assertAll("inventoryManager_observer shippingDepartment_observer",
        () -> assertEquals(rc, inventoryManager.getMsg()),
        () -> assertEquals(rc, shippingDepartment.getMsg()));
        // assertTrue(true); // Dummy assertion
    }

     /*
     * Testing ProductFactory
     */
    @Test
    @DisplayName("testCreateProductLaptop")
    public void ProductFactoryTest_tc_0() {
        ProductFactory factory = new ElectronicsFactory();
        Product product = factory.createProduct("Laptop");
        assertNotNull(product);
        assertEquals("Laptop", product.getName());
        assertEquals(999.99, product.getPrice(), 0.01);
    }

    @Test
    @DisplayName("testCreateProductPhone")
    public void ProductFactoryTest_tc_1() {
        ProductFactory factory = new ElectronicsFactory();
        Product product = factory.createProduct("Phone");
        assertNotNull(product);
        assertEquals("Phone", product.getName());
        assertEquals(499.99, product.getPrice(), 0.01);
    }

    @Test
    @DisplayName("testCreateProductInvalidType")
    public void ProductFactoryTest_tc_2() {
        ProductFactory factory = new ElectronicsFactory();
        Product product = factory.createProduct("InvalidType");
        assertNull(product);
    }

    /*
     * Testing Product (Laptop and Phone)
     */

    @Test
    @DisplayName("testLaptopProduct")
    public void ProductTest_tc_0() {
        Product laptop = new Laptop("Laptop", 999.99);
        assertEquals("Laptop", laptop.getName());
        assertEquals(999.99, laptop.getPrice(), 0.01);
    }

    @Test
    @DisplayName("testPhoneProduct")
    public void ProductTest_tc_1() {
        Product phone = new Phone("Phone", 499.99);
        assertEquals("Phone", phone.getName());
        assertEquals(499.99, phone.getPrice(), 0.01);
    }
}
